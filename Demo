#######################################################################################
npx projen new awscdk-construct

#######################################################################################
### Update .projenrc
const { awscdk, SourceCode } = require('projen');
const project = new awscdk.AwsCdkConstructLibrary({
  author: 'Ayman Zahran',
  authorAddress: 'ah.zahran@outlook.com',
  cdkVersion: '2.1.0',
  defaultReleaseBranch: 'main',
  name: 'projen-cdk-tutorial-part-1',
  repositoryUrl: 'https://github.com/AymanZahran/projen-cdk-tutorial-part-1.git',
  description: 'This package is for Projen Demo',

  // Add License
  licensed: true,
  license: 'Apache-2.0',

  // Add gitpod.yml
  gitpod: true,

  // Generate API Doc
  docgen: true,
  docgenFilePath: 'API.md',

  // Automation Trigger
  releaseEveryCommit: true,
  autoApproveUpgrades: true,
  autoApproveOptions: { allowedUsernames: ['AymanZahran'] },

  // Publish to Git Release
  release: true,

  // Publish to Npm
  releaseToNpm: true,
  packageName: 'ecs-package',

  // Publish to Pypi
  publishToPypi: {
    distName: 'ecs-dist',
    module: 'ecs-mod',
  },

  // Publish to Nugget
  publishToNuget: {
    dotNetNamespace: 'userorg.userns',
    packageId: 'userpackages.ecspackage',
  },

  // // Publish to Maven
  // publishToMaven: {
  //   mavenGroupId: '<your_package_group_id',
  //   mavenArtifactId: '<your_package_target_id>',
  //   javaPackage: '<your_java_package>',
  // },

  // publishToGo: {
  //   moduleName: "<your_moduleName>",
  // },

});

project.gitpod.addDockerImage({
  dockerFile: '.gitpod.Dockerfile',
});

function ts(path) {
  const src = new SourceCode(project, path);
  src.line('// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".');
  return src;
}

// Ecs Construct
const EcsConstructInterface = 'MyEcsProps';
const EcsConstructConstructor = 'MyEcsConstruct';
const EcsConstruct = ts('src/index.ts');

EcsConstruct.line('import * as ec2 from \'aws-cdk-lib/aws-ec2\';');
EcsConstruct.line('import * as ecs from \'aws-cdk-lib/aws-ecs\';');
EcsConstruct.line('import * as ecs_patterns from \'aws-cdk-lib/aws-ecs-patterns\';');
EcsConstruct.line('import { Construct } from \'constructs\';');
EcsConstruct.line('import * as path from \'path\';');

EcsConstruct.open(`export interface ${ EcsConstructInterface } {`);
EcsConstruct.line('readonly maxAzs: number;');
EcsConstruct.line('readonly desiredCount: number;');
EcsConstruct.line('readonly cpu: number;');
EcsConstruct.line('readonly memoryLimitMiB: number;');
EcsConstruct.line('readonly dockerDirAsset: string;');
EcsConstruct.line('readonly dockerFileAsset: string;');
EcsConstruct.close('}');

EcsConstruct.open(`export class ${ EcsConstructConstructor } extends Construct {`);
EcsConstruct.open(`constructor(scope: Construct, id: string, props: ${ EcsConstructInterface }) {`);
EcsConstruct.line('super(scope, id);');

EcsConstruct.open('const vpc = new ec2.Vpc(this, \'MyVpc\', {');
EcsConstruct.line('maxAzs: props.maxAzs,');
EcsConstruct.close('});');

EcsConstruct.open('const cluster = new ecs.Cluster(this, \'MyCluster\', {');
EcsConstruct.line('vpc: vpc,');
EcsConstruct.close('});');

EcsConstruct.open('new ecs_patterns.ApplicationLoadBalancedFargateService(this, \'MyFargateService\', {');
EcsConstruct.line('cluster: cluster,');
EcsConstruct.line('desiredCount: props.desiredCount,');
EcsConstruct.line('cpu: props.cpu,');
EcsConstruct.line('memoryLimitMiB: props.memoryLimitMiB,');
EcsConstruct.open('taskImageOptions: {');
EcsConstruct.open('image: ecs.ContainerImage.fromAsset(path.resolve(__dirname, props.dockerDirAsset), {');
EcsConstruct.line('file: props.dockerFileAsset,');
EcsConstruct.close('})');
EcsConstruct.close('},');
EcsConstruct.line('publicLoadBalancer: true,');
EcsConstruct.close('});');

EcsConstruct.close('}');
EcsConstruct.close('}');

//Dummy Test
const DummyTest = 'DummyTest';
const Test = ts('test/hello.test.ts');

Test.open(`test('${ DummyTest }', () => {`);
Test.line('expect(true).toBe(true);');
Test.close('});');

project.synth();

#######################################################################################

projen
#######################################################################################

projen build
#######################################################################################

npx projen new awscdk-app-ts
#######################################################################################

### Update .projenrc

const { awscdk, SourceCode } = require('projen');
const project = new awscdk.AwsCdkTypeScriptApp({
  cdkVersion: '2.1.0',
  defaultReleaseBranch: 'main',
  name: 'projen-cdk-tutorial-part-2',
  description: 'This package is for Projen Demo',

  deps: [
    'ecs-package',
  ],

  // Add License
  licensed: true,
  license: 'Apache-2.0',

  // Add gitpod.yml
  gitpod: true,

});

project.gitpod.addDockerImage({
  dockerFile: '.gitpod.Dockerfile',
});

project.gitpod.addCustomTask({
  name: "PersistEnv",
  command: "eval $(gp env -e)",
});

project.gitpod.addCustomTask({
  name: "ConfigAwsConfig",
  command: `echo "[gitpod]" >> ~/.aws/config && echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config && echo "cli_auto_prompt = on-partial" >> ~/.aws/config`,
});

project.gitpod.addCustomTask({
  name: "ConfigAwsCredentials",
  command: `echo "[gitpod]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials`,
});

project.gitpod.addCustomTask({
  name: "ConfigAwsCredentials",
  command: `echo "[gitpod]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials`,
});

project.gitpod.addCustomTask({
  name: "CdkBootstrap",
  command: `if [[ "$ENABLE_CDK_BOOTSTRAP" == TRUE ]]; then cdk bootstrap aws://$AWS_ACCOUNT_NUMBER/$AWS_DEFAULT_REGION; fi`,
});

function ts(path) {
  const src = new SourceCode(project, path);
  src.line(`// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`);
  return src;
}

function docker(path) {
  const src = new SourceCode(project, path);
  src.line(`# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`);
  return src;
}

// Ecs App
const EcsApp = ts('src/main.ts');
EcsApp.line(`import { App } from 'aws-cdk-lib';`);
EcsApp.line(`import { EcsStack } from './ecs_stack';`);
EcsApp.line(`const app = new App();`);
EcsApp.line(`new EcsStack(app, 'MyEcsStack');`);
EcsApp.line(`app.synth();`);

// Ecs Stack
const EcsStack = ts('src/ecs_stack.ts');
EcsStack.line(`import { Stack, StackProps } from 'aws-cdk-lib';`);
EcsStack.line(`import { Construct } from 'constructs';`);
EcsStack.line(`import { MyEcsConstruct } from 'ecs-package'`);

EcsStack.open(`export class EcsStack extends Stack {`);
EcsStack.open(`constructor(scope: Construct, id: string, props: StackProps = {}) {`);
EcsStack.line(`super(scope, id, props);`);
EcsStack.open(`new MyEcsConstruct(this, 'MyCluster', {`);
EcsStack.line(`desiredCount: 3,`);
EcsStack.line(`maxAzs: 3,`);
EcsStack.line(`cpu: 512,`);
EcsStack.line(`memoryLimitMiB: 1024,`);
EcsStack.line(`dockerDirAsset: "./dockerfiles"`);
EcsStack.line(`dockerFileAsset: "MyImage.Dockerfile"`);
EcsStack.close(`});`);
EcsStack.close(`}`);
EcsStack.close(`}`);

// Dockerfile Asset
const DockerAsset = docker('src/dockerfiles/MyImage.Dockerfile');
DockerAsset.line(`FROM nginx:latest`)

// Dummy Test
const DummyTest = 'DummyTest';
const Test = ts('test/hello.test.ts');

Test.open(`test('${ DummyTest }', () => {`);
Test.line('expect(true).toBe(true);');
Test.close('});');

project.synth();

#######################################################################################
projen

#######################################################################################
projen build

#######################################################################################
cdk deploy

#######################################################################################
cdk destroy

#######################################################################################
npx projen new awscdk-app-ts

#######################################################################################
### Update .projenrc

const { awscdk, SourceCode } = require('projen');
const project = new awscdk.AwsCdkTypeScriptApp({
  cdkVersion: '2.1.0',
  defaultReleaseBranch: 'main',
  name: 'projen-cdk-tutorial-part-2',
  description: 'This package is for Projen Demo',

  deps: [
    'ecs-package',
  ],

  // Add License
  licensed: true,
  license: 'Apache-2.0',

  // Add gitpod.yml
  gitpod: true,

});

project.gitpod.addDockerImage({
  dockerFile: '.gitpod.Dockerfile',
});

project.gitpod.addCustomTask({
  name: "PersistEnv",
  command: "eval $(gp env -e)",
});

project.gitpod.addCustomTask({
  name: "ConfigAwsConfig",
  command: `echo "[gitpod]" >> ~/.aws/config && echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config && echo "cli_auto_prompt = on-partial" >> ~/.aws/config`,
});

project.gitpod.addCustomTask({
  name: "ConfigAwsCredentials",
  command: `echo "[gitpod]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials`,
});

project.gitpod.addCustomTask({
  name: "ConfigAwsCredentials",
  command: `echo "[gitpod]" >> ~/.aws/credentials && echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials && echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials`,
});

project.gitpod.addCustomTask({
  name: "CdkBootstrap",
  command: `if [[ "$ENABLE_CDK_BOOTSTRAP" == TRUE ]]; then cdk bootstrap aws://$AWS_ACCOUNT_NUMBER/$AWS_DEFAULT_REGION; fi`,
});

function ts(path) {
  const src = new SourceCode(project, path);
  src.line(`// ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`);
  return src;
}

function docker(path) {
  const src = new SourceCode(project, path);
  src.line(`# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".`);
  return src;
}

// Cdk Pipeline App
const EcsApp = ts('src/main.ts');
EcsApp.line(`import { App } from 'aws-cdk-lib';`);
EcsApp.line(`import { PipelineStack } from './pipeline_stack';`);
EcsApp.line(`const app = new App();`);
EcsApp.line(`new PipelineStack(app, 'PipelineStack');`);
EcsApp.line(`app.synth();`);

// Pipeline Stack
const PipelineStack = ts('src/pipeline_stack.ts');

PipelineStack.line(`import { Stack, StackProps } from 'aws-cdk-lib';`);
PipelineStack.line(`import { Construct } from 'constructs';`);
PipelineStack.line(`import * as codecommit from 'aws-cdk-lib/aws-codecommit';`);
PipelineStack.line(`import {CodeBuildStep, CodePipeline, CodePipelineSource} from "aws-cdk-lib/pipelines";`);
PipelineStack.line(`import {PipelineStage} from './pipeline_stage';`);

PipelineStack.open(`export class PipelineStack extends Stack {`)
PipelineStack.open(`constructor(scope: Construct, id: string, props?: StackProps) {`)
PipelineStack.line(`super(scope, id, props);`)

PipelineStack.open(`const repo = new codecommit.Repository(this, 'cdkPipelinesRepo', {`)
PipelineStack.line(`repositoryName: "cdkPipelinesRepo"`)
PipelineStack.close('});')

PipelineStack.open(`const pipeline = new CodePipeline(this, 'Pipeline', {`)
PipelineStack.line(`pipelineName: 'WorkshopPipeline',`)
PipelineStack.open(`synth: new CodeBuildStep(`)
PipelineStack.open(`'SynthStep', {`)
PipelineStack.line(`input: CodePipelineSource.codeCommit(repo, 'master'),`)
PipelineStack.open(`installCommands: [`)
PipelineStack.line(`'npm install -g aws-cdk'`)
PipelineStack.close(`],`)
PipelineStack.open(`commands: [`)
PipelineStack.line(`'npm ci',`)
PipelineStack.line(`'npm run build',`)
PipelineStack.line(`'npx cdk synth'`)
PipelineStack.close(`]`)
PipelineStack.close('}')
PipelineStack.close(')')
PipelineStack.close('});')

PipelineStack.line(`const deploy = new PipelineStage(this, 'Deploy');`)
PipelineStack.line(`pipeline.addStage(deploy);`)

PipelineStack.close('}')
PipelineStack.close('}')


// Pipeline Stage
const PipelineStage = ts('src/pipeline_stage.ts');

PipelineStage.line(`import { EcsStack } from './ecs_stack';`)
PipelineStage.line(`import { Stage, StageProps } from 'aws-cdk-lib';`)
PipelineStage.line(`import { Construct } from 'constructs';`)

PipelineStage.open(`export class PipelineStage extends Stage {`)
PipelineStage.open(`constructor(scope: Construct, id: string, props?: StageProps) {`)
PipelineStage.line(`super(scope, id, props);`);
PipelineStage.line(`new EcsStack(this, 'EcsStack');`);

PipelineStage.close(`}`)
PipelineStage.close(`}`)

// Ecs Stack
const EcsStack = ts('src/ecs_stack.ts');
EcsStack.line(`import { Stack, StackProps } from 'aws-cdk-lib';`);
EcsStack.line(`import { Construct } from 'constructs';`);
EcsStack.line(`import { MyEcsConstruct } from 'ecs-package'`);

EcsStack.open(`export class EcsStack extends Stack {`);
EcsStack.open(`constructor(scope: Construct, id: string, props: StackProps = {}) {`);
EcsStack.line(`super(scope, id, props);`);
EcsStack.open(`new MyEcsConstruct(this, 'MyCluster', {`);
EcsStack.line(`desiredCount: 3,`);
EcsStack.line(`maxAzs: 3,`);
EcsStack.line(`cpu: 512,`);
EcsStack.line(`memoryLimitMiB: 1024,`);
EcsStack.line(`dockerDirAsset: "./dockerfiles"`);
EcsStack.line(`dockerFileAsset: "MyImage.Dockerfile"`);
EcsStack.close(`});`);
EcsStack.close(`}`);
EcsStack.close(`}`);

// Dockerfile Asset
const DockerAsset = docker('src/dockerfiles/MyImage.Dockerfile');
DockerAsset.line(`FROM nginx:latest`)

// Dummy Test
const DummyTest = 'DummyTest';
const Test = ts('test/hello.test.ts');

Test.open(`test('${ DummyTest }', () => {`);
Test.line('expect(true).toBe(true);');
Test.close('});');

project.synth();